{"version":3,"file":"static/js/937.71de751f.chunk.js","mappings":"6PAGaA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8HAOXE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,yIAQVI,EAAYJ,EAAAA,GAAAA,MAAH,qGAOTK,EAAYL,EAAAA,GAAAA,KAAH,oHAOTM,EAAYN,EAAAA,GAAAA,EAAH,2DAKTO,EAAYP,EAAAA,GAAAA,OAAH,yR,gDCxBhBQ,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAACL,EAAD,UAAYK,QAK/BC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,KAAMI,EAAAA,KAAaE,WACnBC,OAAQH,EAAAA,KAAaI,IAAI,GAAGC,IAAI,IAAIH,aAGhCI,EAAgB,CACpBV,KAAM,GACNO,OAAQ,IAIGI,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,iBAAkBX,EAClBY,SATiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BL,EAASM,EAAAA,WAA8BF,IACvCC,KAIA,UAKE,UAACxB,EAAD,CAAY0B,aAAa,MAAzB,WACE,UAACxB,EAAD,YACE,SAACC,EAAD,oBACA,SAACN,EAAD,CACE8B,KAAK,OACLpB,KAAK,OACLqB,MAAM,4IAER,SAACtB,EAAD,CAAWC,KAAK,aAGlB,UAACL,EAAD,YACE,SAACC,EAAD,4BACA,SAACN,EAAD,CACE8B,KAAK,MACLpB,KAAK,SACLqB,MAAM,kGAER,SAACtB,EAAD,CAAWC,KAAK,eAElB,SAACF,EAAD,CAAWsB,KAAK,SAAhB,+BCjEKE,EAAY/B,EAAAA,GAAAA,OAAH,wRAmBTgC,EAAOhC,EAAAA,GAAAA,GAAH,6CAIJiC,EAAOjC,EAAAA,GAAAA,GAAH,4CCxBJkC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAEpCC,EAAqB,SAAAH,GAChC,IAAMC,EAJmB,SAAAD,GAAK,OAAIA,EAAMC,SAASG,MAIhCC,CAAYL,GAGvBM,EAFSP,EAAUC,GAEOO,cAEhC,OAAON,EAASC,QAAO,SAAAM,GAAO,OAC5BA,EAAQlC,KAAKiC,cAAcE,SAASH,OCL3BI,EAAc,WACzB,IAAMT,GAAWU,EAAAA,EAAAA,IAAYR,GACvBjB,GAAWC,EAAAA,EAAAA,MAGjB,OACE,SAACU,EAAD,UACGI,EAASW,KAAI,gBAAGC,EAAH,EAAGA,GAAIvC,EAAP,EAAOA,KAAMO,EAAb,EAAaA,OAAb,OACZ,UAACiB,EAAD,YACE,4BACGxB,EADH,KACWO,MAEX,SAACe,EAAD,CAAWF,KAAK,SAASoB,QAAS,kBATlB,SAAAD,GAAE,OAAI3B,EAASM,EAAAA,cAAiCqB,IASxBE,CAAgBF,IAAxD,sBAJSA,SCXNG,EAAcnD,EAAAA,GAAAA,MAAH,+CAIXoD,EAAcpD,EAAAA,GAAAA,KAAH,oHAOXqD,EAAcrD,EAAAA,GAAAA,MAAH,mJCRXsD,EAAS,WACpB,IAAMC,GAAQT,EAAAA,EAAAA,IAAYZ,GACpBb,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAAC6B,EAAD,YACE,SAACC,EAAD,qCACA,SAACC,EAAD,CAAaxB,KAAK,OAAO0B,MAAOA,EAAOC,SAL1B,SAAAC,GAAC,OAAIpC,EAASqC,EAAAA,aAA6BD,EAAEE,OAAOJ,e,UCkBvE,EAlBqB,WACnB,IAAMlC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsC,EAAAA,EAAAA,YAAU,WACRvC,EAASM,EAAAA,mBACR,CAACN,KAGF,UAACwC,EAAA,EAAD,YACE,uCACA,SAACzC,EAAD,KACA,sCACA,SAACkC,EAAD,KACA,SAACT,EAAD","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const StyledInput = styled(Field)`\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  :focus-visible {\n    outline: 2px solid #2196f3;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 30px 15px;\n  border: 1px solid black;\n`;\n\nexport const FormField = styled.label`\n  position: relative;\n  :not(:last-child) {\n    margin-bottom: 28px;\n  }\n`;\n\nexport const FormLabel = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translateY(calc(-100% + -4px));\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 14px;\n`;\n\nexport const SubmitBtn = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n\n  margin-top: 20px;\n  display: block;\n\n  max-width: 100px;\n  padding: 7px 4px;\n\n  font-size: 13px;\n\n  border-radius: 4px;\n\n  :hover {\n    background-color: #c8e4fc;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport {\n  ErrorText,\n  StyledInput,\n  StyledForm,\n  FormField,\n  FormLabel,\n  SubmitBtn,\n} from './ContactForm.styled';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(6).max(13).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\n//main form\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(contactsOperations.addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm autoComplete=\"off\">\n        <FormField>\n          <FormLabel>Name</FormLabel>\n          <StyledInput\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <FormError name=\"name\" />\n        </FormField>\n\n        <FormField>\n          <FormLabel>Phone number</FormLabel>\n          <StyledInput\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <FormError name=\"number\" />\n        </FormField>\n        <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const DeleteBtn = styled.button`\n  font: inherit;\n  cursor: pointer;\n\n  margin-left: 20px;\n  margin-top: 20px;\n  max-width: 100px;\n  padding: 5px 4px;\n\n  border: none;\n  outline: none;\n  font-size: 12px;\n  border-radius: 4px;\n\n  :hover {\n    background-color: #c8e4fc;\n  }\n`;\n\nexport const List = styled.ul`\n  margin-top: 10px;\n`;\n\nexport const Item = styled.li`\n  font-size: 16px;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { DeleteBtn, Item, List } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <span>\n            {name}: {number}\n          </span>\n          <DeleteBtn type=\"button\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </DeleteBtn>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterField = styled.label`\n  position: relative;\n`;\n\nexport const FilterLabel = styled.span`\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translateY(calc(-100% + -4px));\n`;\n\nexport const FilterInput = styled.input`\n  margin-top: 30px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  :focus-visible {\n    outline: 2px solid #2196f3;\n  }\n`;\n","import { FilterField, FilterInput, FilterLabel } from './Filter.styled';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions } from 'redux/contacts';\n\nexport const Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(contactsActions.changeFilter(e.target.value));\n\n  return (\n    <FilterField>\n      <FilterLabel>Find contacts by name</FilterLabel>\n      <FilterInput type=\"text\" value={value} onChange={onChange} />\n    </FilterField>\n  );\n};\n","import { Container } from 'components/Container';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>PhoneBook</h1>\n      <ContactForm />\n      <h1>Contacts</h1>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledInput","styled","Field","StyledForm","Form","FormField","FormLabel","ErrorText","SubmitBtn","FormError","name","render","message","schema","yup","shape","required","number","min","max","initialValues","ContactForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","contactsOperations","autoComplete","type","title","DeleteBtn","List","Item","getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","includes","ContactList","useSelector","map","id","onClick","onDeleteContact","FilterField","FilterLabel","FilterInput","Filter","value","onChange","e","contactsActions","target","useEffect","Container"],"sourceRoot":""}