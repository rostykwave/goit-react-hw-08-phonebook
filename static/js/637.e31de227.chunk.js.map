{"version":3,"file":"static/js/637.e31de227.chunk.js","mappings":"sOAOMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,GACG,oBACPC,MAAM,uBACNC,SAAS,qBACZC,SAAUH,EAAAA,GACA,uBACPI,IAAI,EAAG,qDACPF,SAAS,0BA4Gd,UAzGkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbR,MAAO,GACPE,SAAU,IAEZJ,iBAAkBA,EAClBW,SAAU,SAACC,EAAD,GAA+B,EAApBC,cACnBP,EAASQ,EAAAA,GAAAA,MAAqBF,OAIlC,OACE,SAAC,IAAD,CACEG,GAAI,CACFC,GAAI,MACJC,SAAU,QACVC,OAAQ,OACRC,QAAS,OACTC,WAAY,UANhB,UASE,kBAAMT,SAAUH,EAAOa,aAAvB,WACE,SAAC,IAAD,CACEC,QAAQ,WACRP,GAAI,CAAEQ,GAAI,SACVC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAOpB,EAAOI,OAAOV,MACrB2B,SAAUrB,EAAOsB,aACjBC,MAAOvB,EAAOwB,QAAQ9B,OAAS+B,QAAQzB,EAAO0B,OAAOhC,OACrDiC,WAAY3B,EAAOwB,QAAQ9B,OAASM,EAAO0B,OAAOhC,SAEpD,SAAC,IAAD,CACEoB,QAAQ,WACRP,GAAI,CAAEQ,GAAI,SACVC,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNS,KAAK,WACLR,MAAOpB,EAAOI,OAAOR,SACrByB,SAAUrB,EAAOsB,aACjBC,MAAOvB,EAAOwB,QAAQ5B,UAAY6B,QAAQzB,EAAO0B,OAAO9B,UACxD+B,WAAY3B,EAAOwB,QAAQ5B,UAAYI,EAAO0B,OAAO9B,YAEvD,SAAC,IAAD,CAAQiC,MAAM,UAAUf,QAAQ,YAAYE,WAAS,EAACY,KAAK,SAA3D","sources":["pages/LoginPage.jsx"],"sourcesContent":["import { Button, TextField } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport * as yup from 'yup';\nimport { Container } from '@mui/system';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, { setSubmitting }) => {\n      dispatch(authOperations.logIn(values));\n    },\n  });\n\n  return (\n    <Container\n      sx={{\n        mt: '1em',\n        maxWidth: '300px',\n        height: '80vh',\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          variant=\"standard\"\n          sx={{ mb: '1.5em' }}\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          variant=\"standard\"\n          sx={{ mb: '1.5em' }}\n          fullWidth\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Log in\n        </Button>\n      </form>\n    </Container>\n  );\n\n  // const handleSubmit = (values, { setSubmitting }) => {\n  //   dispatch(authOperations.logIn(values));\n  // };\n\n  // return (\n  //   <div>\n  //     <h1>Login Page!</h1>\n  //     {/* <TextField label=\"Test\" />\n  //     <Button variant=\"text\">Text</Button>\n  //     <Button variant=\"contained\">Contained</Button>\n  //     <Button variant=\"outlined\">Outlined</Button> */}\n  //     <Formik\n  //       initialValues={{ email: '', password: '' }}\n  //       validate={values => {\n  //         const errors = {};\n  //         if (!values.email) {\n  //           errors.email = 'Required';\n  //         } else if (\n  //           !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n  //         ) {\n  //           errors.email = 'Invalid email address';\n  //         }\n  //         return errors;\n  //       }}\n  //       onSubmit={handleSubmit}\n  //     >\n  //       {({ isSubmitting }) => (\n  //         <Form>\n  //           <label>\n  //             <span>Email</span>\n  //             <Field type=\"email\" name=\"email\" />\n  //             <ErrorMessage name=\"email\" component=\"div\" />\n  //           </label>\n  //           <label>\n  //             <span>Password</span>\n  //             <Field type=\"password\" name=\"password\" />\n  //             <ErrorMessage name=\"password\" component=\"div\" />\n  //           </label>\n  //           <button type=\"submit\" disabled={isSubmitting}>\n  //             Log in\n  //           </button>\n  //         </Form>\n  //       )}\n  //     </Formik>\n  //   </div>\n  // );\n};\n\nexport default LoginPage;\n\n// import { useState } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { authOperations } from '../redux/auth';\n\n// const styles = {\n//   form: {\n//     width: 320,\n//   },\n//   label: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     marginBottom: 15,\n//   },\n// };\n\n// const LoginPage = () => {\n//   const dispatch = useDispatch();\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   const handleChange = ({ target: { name, value } }) => {\n//     switch (name) {\n//       case 'email':\n//         return setEmail(value);\n//       case 'password':\n//         return setPassword(value);\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     dispatch(authOperations.logIn({ email, password }));\n//     setEmail('');\n//     setPassword('');\n//   };\n\n//   return (\n//     <div>\n//       <h1>Login Page</h1>\n\n//       <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n//         <label style={styles.label}>\n//           Mail\n//           <input\n//             type=\"email\"\n//             name=\"email\"\n//             value={email}\n//             onChange={handleChange}\n//           />\n//         </label>\n\n//         <label style={styles.label}>\n//           Password\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             value={password}\n//             onChange={handleChange}\n//           />\n//         </label>\n\n//         <button type=\"submit\">Log in</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n"],"names":["validationSchema","yup","email","required","password","min","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","setSubmitting","authOperations","sx","mt","maxWidth","height","display","alignItems","handleSubmit","variant","mb","fullWidth","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","color"],"sourceRoot":""}