{"version":3,"file":"static/js/915.6d68a719.chunk.js","mappings":"0QACaA,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAEpCC,EAAqB,SAAAH,GAChC,IAAMC,EAJmB,SAAAD,GAAK,OAAIA,EAAMC,SAASG,MAIhCC,CAAYL,GAGvBM,EAFSP,EAAUC,GAEOO,cAEhC,OAAON,EAASC,QAAO,SAAAM,GAAO,OAC5BA,EAAQC,KAAKF,cAAcG,SAASJ,O,mBCH3BK,EAAc,WACzB,IAAMV,GAAWW,EAAAA,EAAAA,IAAYT,GACvBU,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,IACCf,EAASgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIT,EAAP,EAAOA,KAAMU,EAAb,EAAaA,OAAb,OACZ,UAACC,EAAA,GAAD,CAEEC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAFzC,WAIE,UAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGhB,EADH,KACWU,MAEX,SAACO,EAAA,EAAD,CAAYC,QAAS,kBAbL,SAAAT,GAAE,OAAIL,EAASe,EAAAA,cAAiCV,IAarCW,CAAgBX,IAA3C,UACE,SAACY,EAAA,EAAD,QAPGZ,U,SCZFa,EAAS,WACpB,IAAMC,GAAQpB,EAAAA,EAAAA,IAAYb,GACpBc,GAAWC,EAAAA,EAAAA,MAGjB,OACE,SAACmB,EAAA,EAAD,CACER,QAAQ,WACRJ,GAAI,CAAEa,GAAI,SACVC,WAAS,EACT1B,KAAK,SACL2B,MAAM,wBACNC,KAAK,OACLL,MAAOA,EACPM,SAXa,SAAAC,GAAC,OAAI1B,EAAS2B,EAAAA,aAA6BD,EAAEE,OAAOT,Y,sHCAjEU,EAAmBC,EAAAA,GAAW,CAClClC,KAAMkC,EAAAA,GACI,mBAEPC,SAAS,oBACZzB,OAAQwB,EAAAA,GACE,qBACPE,IAAI,EAAG,mDACPD,SAAS,wBAGDE,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtBlC,GAAWC,EAAAA,EAAAA,MAEXkC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbzC,KAAM,GACNU,OAAQ,IAEVuB,iBAAkBA,EAClBS,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBxC,EAASe,EAAAA,WAA8BwB,IACvCC,IACAN,OAIJ,OACE,SAACO,EAAA,EAAD,CAAWjC,GAAI,CAAEkC,GAAI,OAArB,UACE,kBAAMJ,SAAUH,EAAOQ,aAAcC,aAAa,MAAlD,WACE,SAACxB,EAAA,EAAD,CACER,QAAQ,WACRJ,GAAI,CAAEa,GAAI,SACVC,WAAS,EACTjB,GAAG,OACHT,KAAK,OACL2B,MAAM,OACNC,KAAK,OACLL,MAAOgB,EAAOI,OAAO3C,KACrB6B,SAAUU,EAAOU,aACjBC,MAAOX,EAAOY,QAAQnD,MAAQoD,QAAQb,EAAOc,OAAOrD,MACpDsD,WAAYf,EAAOY,QAAQnD,MAAQuC,EAAOc,OAAOrD,QAEnD,SAACwB,EAAA,EAAD,CACER,QAAQ,WACRJ,GAAI,CAAEa,GAAI,SACVC,WAAS,EACTjB,GAAG,SACHT,KAAK,SACL2B,MAAM,SACNC,KAAK,OACLL,MAAOgB,EAAOI,OAAOjC,OACrBmB,SAAUU,EAAOU,aACjBC,MAAOX,EAAOY,QAAQzC,QAAU0C,QAAQb,EAAOc,OAAO3C,QACtD4C,WAAYf,EAAOY,QAAQzC,QAAU6B,EAAOc,OAAO3C,UAErD,SAAC6C,EAAA,EAAD,CAAQC,MAAM,UAAUxC,QAAQ,YAAYU,WAAS,EAACE,KAAK,SAA3D,+BCrDF6B,EAAQ,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,IACPC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXC,EAAG,GAGQC,EAAa,SAAC,GAAiB,EAAfC,SAAgB,IAC3C,EAAwBC,EAAAA,UAAe,GAAvC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,IAElC,OACE,4BACE,SAACE,EAAA,EAAD,CACEvD,QANa,kBAAMqD,GAAQ,IAO3B,aAAW,MACXf,MAAM,UACNkB,KAAK,SACL9D,GAAI,CACF8C,SAAU,QACViB,MAAO,OACPC,OAAQ,QARZ,UAWE,SAACC,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CACE,kBAAgB,yBAChB,mBAAiB,+BACjBR,KAAMA,EACNS,QAASP,EACTQ,sBAAoB,EACpBC,kBAAmBC,EAAAA,EACnBC,cAAe,CACbC,QAAS,KARb,UAWE,SAACC,EAAA,EAAD,CAAMC,GAAIhB,EAAV,UACE,SAACiB,EAAA,EAAD,CAAK3E,GAAI6C,EAAT,UACE,SAACpB,EAAD,CAAaC,aAAckC,cC/BvC,EAjBqB,WACnB,IAAMpE,GAAWC,EAAAA,EAAAA,MAMjB,OAJAmF,EAAAA,EAAAA,YAAU,WACRpF,EAASe,EAAAA,mBACR,CAACf,KAGF,UAACyC,EAAA,EAAD,CAAW4C,SAAS,KAApB,WACE,SAACnE,EAAD,KACA,SAACpB,EAAD,KAEA,SAACiE,EAAD","sources":["redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/AddContact/AddContact.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","// import { DeleteBtn, Item, List } from './ContactList.styled';\nimport { IconButton, Divider, List, ListItem, Typography } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport PersonRemoveIcon from '@mui/icons-material/PersonRemove';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <List>\n      <Divider />\n      {contacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          sx={{ display: 'flex', justifyContent: 'space-between' }}\n        >\n          <Typography variant=\"h5\">\n            {name}: {number}\n          </Typography>\n          <IconButton onClick={() => onDeleteContact(id)}>\n            <PersonRemoveIcon />\n          </IconButton>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import { getFilter } from 'redux/contacts/contacts-selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions } from 'redux/contacts';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(contactsActions.changeFilter(e.target.value));\n\n  return (\n    <TextField\n      variant=\"standard\"\n      sx={{ mb: '1.5em' }}\n      fullWidth\n      name=\"filter\"\n      label=\"Find contacts by name\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n","import { Button, TextField } from '@mui/material';\nimport { useFormik } from 'formik';\n// import { Formik, Form, Field, ErrorMessage, useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport * as yup from 'yup';\nimport { Container } from '@mui/system';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string('Enter your name')\n\n    .required('Name is required'),\n  number: yup\n    .string('Enter your number')\n    .min(6, 'Number should be of minimum 8 characters length')\n    .required('Number is required'),\n});\n\nexport const ContactForm = ({ onAddContact }) => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(contactsOperations.addContact(values));\n      resetForm();\n      onAddContact();\n    },\n  });\n\n  return (\n    <Container sx={{ mt: '1em' }}>\n      <form onSubmit={formik.handleSubmit} autoComplete=\"off\">\n        <TextField\n          variant=\"standard\"\n          sx={{ mb: '1.5em' }}\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          type=\"text\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          variant=\"standard\"\n          sx={{ mb: '1.5em' }}\n          fullWidth\n          id=\"number\"\n          name=\"number\"\n          label=\"Number\"\n          type=\"text\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Add contact\n        </Button>\n      </form>\n    </Container>\n  );\n};\n// import { Formik, ErrorMessage } from 'formik';\n// import {\n//   ErrorText,\n//   StyledInput,\n//   StyledForm,\n//   FormField,\n//   FormLabel,\n//   SubmitBtn,\n// } from './ContactForm.styled';\n// import * as yup from 'yup';\n// import { useDispatch } from 'react-redux';\n// import { contactsOperations } from 'redux/contacts';\n\n// const FormError = ({ name }) => {\n//   return (\n//     <ErrorMessage\n//       name={name}\n//       render={message => <ErrorText>{message}</ErrorText>}\n//     />\n//   );\n// };\n\n// const schema = yup.object().shape({\n//   name: yup.string().required(),\n//   number: yup.string().min(6).max(13).required(),\n// });\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// //main form\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = (values, { resetForm }) => {\n//     dispatch(contactsOperations.addContact(values));\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       validationSchema={schema}\n//       onSubmit={handleSubmit}\n//     >\n//       <StyledForm autoComplete=\"off\">\n//         <FormField>\n//           <FormLabel>Name</FormLabel>\n//           <StyledInput\n//             type=\"text\"\n//             name=\"name\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           />\n//           <FormError name=\"name\" />\n//         </FormField>\n\n//         <FormField>\n//           <FormLabel>Phone number</FormLabel>\n//           <StyledInput\n//             type=\"tel\"\n//             name=\"number\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           />\n//           <FormError name=\"number\" />\n//         </FormField>\n//         <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n//       </StyledForm>\n//     </Formik>\n//   );\n// };\n","import * as React from 'react';\nimport Backdrop from '@mui/material/Backdrop';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Fade from '@mui/material/Fade';\n// import Button from '@mui/material/Button';\n// import Typography from '@mui/material/Typography';\nimport { Fab } from '@mui/material';\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\nimport { ContactForm } from 'components/ContactForm';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport const AddContact = ({ children }) => {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <Fab\n        onClick={handleOpen}\n        aria-label=\"add\"\n        color=\"primary\"\n        size=\"medium\"\n        sx={{\n          position: 'fixed',\n          right: '20px',\n          bottom: '25px',\n        }}\n      >\n        <PersonAddAlt1Icon />\n      </Fab>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <Box sx={style}>\n            <ContactForm onAddContact={handleClose} />\n          </Box>\n        </Fade>\n      </Modal>\n    </div>\n  );\n};\n","import { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport { Container } from '@mui/system';\nimport { AddContact } from 'components/AddContact';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Filter />\n      <ContactList />\n\n      <AddContact />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactList","useSelector","dispatch","useDispatch","List","Divider","map","id","number","ListItem","sx","display","justifyContent","Typography","variant","IconButton","onClick","contactsOperations","onDeleteContact","PersonRemove","Filter","value","TextField","mb","fullWidth","label","type","onChange","e","contactsActions","target","validationSchema","yup","required","min","ContactForm","onAddContact","formik","useFormik","initialValues","onSubmit","values","resetForm","Container","mt","handleSubmit","autoComplete","handleChange","error","touched","Boolean","errors","helperText","Button","color","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","AddContact","children","React","open","setOpen","handleClose","Fab","size","right","bottom","PersonAddAlt1","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Box","useEffect","maxWidth"],"sourceRoot":""}